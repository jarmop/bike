{"version":3,"sources":["api.ts","List.js","Map.js","App.js","registerServiceWorker.js","index.js"],"names":["belongsToCorrectBikeNetwork","stationData","networks","includes","fetchStations","fetch","then","res","json","data","stations","filter","map","id","name","bikesAvailable","lat","x","lon","y","isOn","state","List","api","setState","station","props","favoriteStations","this","Component","Map","L","locate","setView","maxZoom","tileLayer","attribution","tileSize","zoomOffset","addTo","forEach","classNames","push","divIcon","html","className","join","iconSize","marker","icon","buildMap","PATH_LIST","getUrl","path","process","App","to","exact","render","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d0cef5d3.chunk.js","sourcesContent":["const URL_DIGITRANSIT =\n  'https://api.digitransit.fi/routing/v1/routers/hsl/bike_rental';\n\nconst BIKE_NETWORK_ID = 'smoove';\n\nconst STATION_STATE_ON = 'Station on';\n// const STATION_STATE_OFF = 'Station off';\n\ntype Station = {\n  id: string;\n  name: string;\n  bikesAvailable: number;\n  lat: number;\n  lon: number;\n  isOn: boolean;\n};\n\nconst belongsToCorrectBikeNetwork = (stationData: any) =>\n  stationData.networks.includes(BIKE_NETWORK_ID);\n\nexport const fetchStations = () => {\n  return fetch(URL_DIGITRANSIT)\n    .then((res) => res.json())\n    .then((data) => {\n      let stations: Array<Station> = data.stations\n        .filter(belongsToCorrectBikeNetwork)\n        .map((stationData: any) => ({\n          id: stationData.id,\n          name: stationData.name,\n          bikesAvailable: stationData.bikesAvailable,\n          lat: stationData.x,\n          lon: stationData.y,\n          isOn: stationData.state === STATION_STATE_ON,\n        }));\n\n      return stations;\n    });\n};\n","import React, {Component} from 'react';\n\nimport * as api from './api';\n\nclass List extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stations: [],\n    };\n  }\n\n  componentDidMount() {\n    api.fetchStations().then(stations =>\n        this.setState({\n          stations: stations.filter(\n              station => this.props.favoriteStations.includes(station.id)\n          ),\n        })\n    );\n  }\n\n  render() {\n    return (\n        <div>\n          <div>\n            {this.state.stations.map(station =>\n                <div key={station.id}>\n                  {station.name}: {station.bikesAvailable}\n                </div>\n            )}\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default List;","import React, { Component } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\nimport './Map.css';\n\nimport * as api from './api';\n\nconst CONTAINER_ID = 'map';\nconst BIKE_STATION_DIAMETER = 18;\nconst CENTER_LATITUDE = 24.925;\nconst CENTER_LONGITUDE = 60.168;\n\nconst buildMap = (stations) => {\n  let map = L.map(CONTAINER_ID).locate({ setView: true, maxZoom: 14 });\n\n  L.tileLayer(\n    'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw',\n    {\n      attribution:\n        '© <a href=\"https://www.mapbox.com/about/maps/\">Mapbox</a> © <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> <strong><a href=\"https://www.mapbox.com/map-feedback/\" target=\"_blank\">Improve this map</a></strong>',\n      tileSize: 512,\n      maxZoom: 18,\n      zoomOffset: -1,\n      id: 'mapbox/streets-v11',\n    }\n  ).addTo(map);\n\n  stations.forEach((station) => {\n    let classNames = ['bike-station'];\n\n    if (!station.isOn) {\n      classNames.push('bike-station--off');\n    } else if (station.bikesAvailable === 0) {\n      classNames.push('bike-station--empty');\n    } else if (station.bikesAvailable < 4) {\n      classNames.push('bike-station--low');\n    }\n\n    let divIcon = L.divIcon({\n      html: station.bikesAvailable,\n      className: classNames.join(' '),\n      iconSize: [BIKE_STATION_DIAMETER, BIKE_STATION_DIAMETER],\n    });\n    L.marker([station.lon, station.lat], { icon: divIcon }).addTo(map);\n  });\n};\n\nclass Map extends Component {\n  componentDidMount() {\n    api.fetchStations().then((stations) => buildMap(stations));\n  }\n\n  render() {\n    return <div id=\"map\" className=\"map\"></div>;\n  }\n}\n\nexport default Map;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport './App.css';\nimport List from './List';\nimport Map from './Map';\n\nconst PATH_LIST = '/list';\nconst PATH_MAP = '/';\n\n// Make relative url absolute to fix routing on Github pages.\nconst getUrl = (path) => {\n  // Homepage set in package.json is exposed as process.env.PUBLIC_URL.\n  return process.env.PUBLIC_URL + path;\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      favoriteStations: ['021', '023', '030'],\n    };\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <div className=\"nav\">\n            <Link to={getUrl(PATH_LIST)}>List</Link>\n            {' | '}\n            <Link to={getUrl(PATH_MAP)}>Map</Link>\n          </div>\n          <div>\n            <Route\n              exact\n              path={getUrl(PATH_LIST)}\n              render={() => (\n                <List favoriteStations={this.state.favoriteStations} />\n              )}\n            />\n            <Route path={getUrl(PATH_MAP)} component={Map} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}